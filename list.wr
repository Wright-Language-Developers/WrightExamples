#?! Wright Linked list implementation.

use std.prelude.option.Option

pub type Node<type T> = Option<NodeClass<T>>

pub class NodeClass<type T>:
    var left: Node<T>,
    var inner: T,
    var right: Node<T>

impl<type T> NodeClass<T>:
    pub inline fn get_inner(val self) -> T: self.inner
    pub fn has_right(val self) -> boolean:
        self.right.is_some()
    pub fn has_left(val self) -> boolean:
        self.left.is_some()
